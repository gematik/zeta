@startuml
!theme plain

title Gesamtablauf: PoPP-Token Abruf mit ZETA SDK & PAR (RFC 9126)

actor Nutzer
participant "Anbieter-App" as App
participant "PoPP-Modul" as PoPP
participant "ZETA-SDK" as SDK
participant "Authorization Server\n(PoPP) Zeta Guard" as AS
participant "Sektoraler IDP" as IDP
participant "Authenticator-App" as AuthApp
participant "HTTP-Proxy\n(PoPP) Zeta Guard" as Proxy
participant "Client Registry" as CR
participant "PoPP Resource Server" as RS

' --- Phase 1: Initialisierung ---
group Phase 1: Initialisierung und Vorbereitung
    Nutzer -> App: Startet Aktion (z.B. Check-in)
    App -> PoPP: Initialisierung PoPP-Token mit LEI-Details

    PoPP -> SDK: init(FQDN des PoPP-Service)
    SDK --> PoPP: Initialisierung abgeschlossen

    PoPP -> PoPP: Generiert HTTP-Request (Telematik-ID, etc.)
    PoPP -> PoPP: Generiert appDetails (Auth-Methode, Ziel-URL)
end

' --- Phase 2: Authentifizierung & Token-Beschaffung ---
group Phase 2: OIDC Authentifizierung und Token Beschaffung
    PoPP -> SDK: execute(HTTP-Request, callBackMethod, appDetails)

    ' --- Äußerer OIDC Flow ---
    SDK -> AS: Startet Authorization Flow am /authorize Endpoint

    ' --- Innerer (föderierter) OIDC Flow mit PAR ---
    group Innerer Flow: ZETA AS agiert als Client des Sektoralen IDP
        ' --- PAR Flow (RFC 9126) ---
        AS -> IDP: **POST /par Endpoint (Pushed Authorization Request)**
        note right of AS: Sendet alle Auth-Parameter\nsicher via Back-Channel
        IDP --> AS: Antwortet mit **request_uri**

        AS -> IDP: **GET /authorize Endpoint (nur mit request_uri)**
        note right of AS: Leitet den Nutzer weiter.\nDie sensiblen Parameter sind nicht im Browser sichtbar.
        ' --- Ende PAR Flow ---
        
        IDP -> AuthApp: Fordert Nutzer-Authentifizierung an
        Nutzer -> AuthApp: Authentifiziert sich
        AuthApp --> IDP: Authentifizierung erfolgreich
        IDP --> AS: Redirect zurück zum AS mit **Authorization Code (für AS)**
        AS -> IDP: Ruft /token Endpoint des IDP auf (Back-Channel)\nmit dem erhaltenen Code
        IDP --> AS: Antwortet mit **ID-Token** (enthält KVNR, IK-Nummer)
        AS -> AS: Validiert ID-Token und extrahiert Claims
    end

    ' --- Abschluss des äußeren OIDC Flows ---
    AS --> SDK: Redirect zurück zum SDK mit **Authorization Code (für SDK)**
    
    SDK -> AS: Ruft /token Endpoint des ZETA AS auf (Back-Channel)\nmit dem neuen Code
    AS -> AS: Generiert **Access Token** für das ZETA-SDK
    AS --> SDK: Antwortet mit dem **Access Token**
    SDK -> SDK: Speichert Access Token zur Session
end

' --- Phase 3: Zugriff auf die geschützte Ressource ---
group Phase 3: Autorisierter Zugriff auf den PoPP Resource Server
    SDK -> Proxy: Ruft HTTP-Proxy mit ursprünglichem HTTP-Request und Access Token auf
    Proxy -> AS: Lädt PoPP-Metainformationen zum Access Token
    Proxy -> CR: Lädt Clientinformationen
    Proxy -> Proxy: Reichert HTTP-Request mit Metadaten an
    Proxy -> RS: Sendet angereicherten Request an PoPP Resource Server
    RS --> Proxy: Antwortet mit dem Ergebnis
    Proxy --> SDK: Leitet die Response weiter
end

' --- Phase 4: Ergebnisverarbeitung ---
group Phase 4: Ergebnisverarbeitung und Darstellung
    SDK -> PoPP: Ruft callBackMethod mit der HTTP-Response auf
    PoPP -> App: Wertet die Antwort fachlich aus
    App -> Nutzer: Stellt das Ergebnis dar
end

@enduml